// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/register.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/shulganew/gophermart/internal/model"
)

// MockRegistrar is a mock of Registrar interface.
type MockRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrarMockRecorder
}

// MockRegistrarMockRecorder is the mock recorder for MockRegistrar.
type MockRegistrarMockRecorder struct {
	mock *MockRegistrar
}

// NewMockRegistrar creates a new mock instance.
func NewMockRegistrar(ctrl *gomock.Controller) *MockRegistrar {
	mock := &MockRegistrar{ctrl: ctrl}
	mock.recorder = &MockRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrar) EXPECT() *MockRegistrarMockRecorder {
	return m.recorder
}

// GetByLogin mocks base method.
func (m *MockRegistrar) GetByLogin(ctx context.Context, login string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockRegistrarMockRecorder) GetByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockRegistrar)(nil).GetByLogin), ctx, login)
}

// Register mocks base method.
func (m *MockRegistrar) Register(ctx context.Context, user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegistrarMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrar)(nil).Register), ctx, user)
}
