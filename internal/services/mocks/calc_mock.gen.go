// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/calc.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	entities "github.com/shulganew/gophermart/internal/entities"
)

// MockCalcRepo is a mock of CalcRepo interface.
type MockCalcRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCalcRepoMockRecorder
}

// MockCalcRepoMockRecorder is the mock recorder for MockCalcRepo.
type MockCalcRepoMockRecorder struct {
	mock *MockCalcRepo
}

// NewMockCalcRepo creates a new mock instance.
func NewMockCalcRepo(ctrl *gomock.Controller) *MockCalcRepo {
	mock := &MockCalcRepo{ctrl: ctrl}
	mock.recorder = &MockCalcRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalcRepo) EXPECT() *MockCalcRepoMockRecorder {
	return m.recorder
}

// GetBonuses mocks base method.
func (m *MockCalcRepo) GetBonuses(ctx context.Context, userID uuid.UUID) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBonuses", ctx, userID)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBonuses indicates an expected call of GetBonuses.
func (mr *MockCalcRepoMockRecorder) GetBonuses(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBonuses", reflect.TypeOf((*MockCalcRepo)(nil).GetBonuses), ctx, userID)
}

// GetWithdrawals mocks base method.
func (m *MockCalcRepo) GetWithdrawals(ctx context.Context, userID uuid.UUID) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockCalcRepoMockRecorder) GetWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockCalcRepo)(nil).GetWithdrawals), ctx, userID)
}

// GetWithdrawn mocks base method.
func (m *MockCalcRepo) GetWithdrawn(ctx context.Context, userID uuid.UUID) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawn", ctx, userID)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawn indicates an expected call of GetWithdrawn.
func (mr *MockCalcRepoMockRecorder) GetWithdrawn(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawn", reflect.TypeOf((*MockCalcRepo)(nil).GetWithdrawn), ctx, userID)
}

// IsPreOrder mocks base method.
func (m *MockCalcRepo) IsPreOrder(ctx context.Context, userID uuid.UUID, order string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPreOrder", ctx, userID, order)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPreOrder indicates an expected call of IsPreOrder.
func (mr *MockCalcRepoMockRecorder) IsPreOrder(ctx, userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPreOrder", reflect.TypeOf((*MockCalcRepo)(nil).IsPreOrder), ctx, userID, order)
}

// MakeWithdrawn mocks base method.
func (m *MockCalcRepo) MakeWithdrawn(ctx context.Context, userID uuid.UUID, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeWithdrawn", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeWithdrawn indicates an expected call of MakeWithdrawn.
func (mr *MockCalcRepoMockRecorder) MakeWithdrawn(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeWithdrawn", reflect.TypeOf((*MockCalcRepo)(nil).MakeWithdrawn), ctx, userID, amount)
}

// MovePreOrder mocks base method.
func (m *MockCalcRepo) MovePreOrder(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MovePreOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// MovePreOrder indicates an expected call of MovePreOrder.
func (mr *MockCalcRepoMockRecorder) MovePreOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MovePreOrder", reflect.TypeOf((*MockCalcRepo)(nil).MovePreOrder), ctx, order)
}

// SetAccrual mocks base method.
func (m *MockCalcRepo) SetAccrual(ctx context.Context, order string, accrual decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccrual", ctx, order, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccrual indicates an expected call of SetAccrual.
func (mr *MockCalcRepoMockRecorder) SetAccrual(ctx, order, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccrual", reflect.TypeOf((*MockCalcRepo)(nil).SetAccrual), ctx, order, accrual)
}

// Withdrawals mocks base method.
func (m *MockCalcRepo) Withdrawals(ctx context.Context, userID uuid.UUID) ([]entities.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", ctx, userID)
	ret0, _ := ret[0].([]entities.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockCalcRepoMockRecorder) Withdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockCalcRepo)(nil).Withdrawals), ctx, userID)
}
