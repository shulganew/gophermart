// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/accrual.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	entities "github.com/shulganew/gophermart/internal/entities"
)

// MockAccrualRepo is a mock of AccrualRepo interface.
type MockAccrualRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualRepoMockRecorder
}

// MockAccrualRepoMockRecorder is the mock recorder for MockAccrualRepo.
type MockAccrualRepoMockRecorder struct {
	mock *MockAccrualRepo
}

// NewMockAccrualRepo creates a new mock instance.
func NewMockAccrualRepo(ctrl *gomock.Controller) *MockAccrualRepo {
	mock := &MockAccrualRepo{ctrl: ctrl}
	mock.recorder = &MockAccrualRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualRepo) EXPECT() *MockAccrualRepoMockRecorder {
	return m.recorder
}

// AddBonuses mocks base method.
func (m *MockAccrualRepo) AddBonuses(ctx context.Context, userID uuid.UUID, amount decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBonuses", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBonuses indicates an expected call of AddBonuses.
func (mr *MockAccrualRepoMockRecorder) AddBonuses(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBonuses", reflect.TypeOf((*MockAccrualRepo)(nil).AddBonuses), ctx, userID, amount)
}

// LoadPocessing mocks base method.
func (m *MockAccrualRepo) LoadPocessing(ctx context.Context) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPocessing", ctx)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPocessing indicates an expected call of LoadPocessing.
func (mr *MockAccrualRepoMockRecorder) LoadPocessing(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPocessing", reflect.TypeOf((*MockAccrualRepo)(nil).LoadPocessing), ctx)
}

// SetAccrual mocks base method.
func (m *MockAccrualRepo) SetAccrual(ctx context.Context, order string, accrual decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccrual", ctx, order, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccrual indicates an expected call of SetAccrual.
func (mr *MockAccrualRepoMockRecorder) SetAccrual(ctx, order, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccrual", reflect.TypeOf((*MockAccrualRepo)(nil).SetAccrual), ctx, order, accrual)
}

// UpdateStatus mocks base method.
func (m *MockAccrualRepo) UpdateStatus(ctx context.Context, order string, status entities.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAccrualRepoMockRecorder) UpdateStatus(ctx, order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAccrualRepo)(nil).UpdateStatus), ctx, order, status)
}

// MockAccrualClient is a mock of AccrualClient interface.
type MockAccrualClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualClientMockRecorder
}

// MockAccrualClientMockRecorder is the mock recorder for MockAccrualClient.
type MockAccrualClientMockRecorder struct {
	mock *MockAccrualClient
}

// NewMockAccrualClient creates a new mock instance.
func NewMockAccrualClient(ctrl *gomock.Controller) *MockAccrualClient {
	mock := &MockAccrualClient{ctrl: ctrl}
	mock.recorder = &MockAccrualClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualClient) EXPECT() *MockAccrualClientMockRecorder {
	return m.recorder
}

// GetOrderStatus mocks base method.
func (m *MockAccrualClient) GetOrderStatus(orderNr string) (*entities.AccrualResponce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", orderNr)
	ret0, _ := ret[0].(*entities.AccrualResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockAccrualClientMockRecorder) GetOrderStatus(orderNr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockAccrualClient)(nil).GetOrderStatus), orderNr)
}
